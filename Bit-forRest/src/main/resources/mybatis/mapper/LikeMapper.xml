<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  <mapper namespace="ProductMapper"> 가 @Mapper 와 함께 밑의 한줄로 대체 됨-->
<mapper namespace="com.mvc.forrest.dao.oldlike.OldLikeDAO"> 	
 	
	<resultMap id="oldLikeSelectMap" type="oldLike">
		<result property="oldLikeNo" 				column="oldLikeNo" 				jdbcType="INTEGER"/>
		<result property="oldNo"	   			column="oldNo" 				jdbcType="INTEGER" />
		<result property="userId" 			column="userId" 				jdbcType="VARCHAR" />
	</resultMap>
	
	<!-- SQL : INSERT -->
	<insert 	id="addOldlike"		parameterType="oldlike" >
		INSERT 
	 	INTO like(PROD_NO, PROD_NAME, MANUFACTURE_DAY, PROD_DETAIL,PRICE,IMAGE_FILE,REG_DATE, QUANTITY) 
	 	values (seq_product_prod_no.nextval, #{prodName},TO_DATE( #{manuDate},'YYYY-MM-DD'), #{prodDetail},#{price},#{fileName}, SYSDATE , #{quantity})
	 </insert>
	 
	 
	 <!-- SQL : DELETE -->
	 <delete	id="deleteProduct"	parameterType="int" >
	   	DELETE
	   	FROM PRODUCT
	   	WHERE PROD_NO = #{prodNo}
	 </delete>
	 
	 
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getProduct"	parameterType="int"	resultMap="productSelectMap">
		SELECT PRODUCT.*  ,  (PRODUCT.QUANTITY-NVL(A.SUM,0)) SUM
		FROM PRODUCT LEFT OUTER JOIN (SELECT PROD_NO, SUM(purchaseQt) SUM FROM TRANSACTION GROUP BY prod_no) A ON PRODUCT.PROD_NO = A.PROD_NO
		where PRODUCT.PROD_NO = #{value}
	 </select>
	 
	 <!-- SQL : UPDATE -->
	 <update	id="updateProduct"	parameterType="product" >
	   	update PRODUCT
	   	<set>
	   		PROD_NAME 	= #{prodName} ,
			PROD_DETAIL	= #{prodDetail},
			MANUFACTURE_DAY	= #{manuDate} ,
			QUANTITY = #{quantity} ,
			PRICE	 	=	#{price},
			IMAGE_FILE	=	#{fileName}
	   	</set>
	   	where PROD_NO = #{prodNo}
	 </update>
		 
	<!-- SQL : SELECT LIST -->
	<select  id="getProductList"  parameterType="search"	resultMap="productSelectMap">
	  	SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	SELECT PRODUCT.*  ,  (PRODUCT.QUANTITY-NVL(A.SUM,0)) SUM
										FROM PRODUCT LEFT OUTER JOIN (SELECT PROD_NO, SUM(purchaseQt) SUM FROM TRANSACTION GROUP BY prod_no) A ON PRODUCT.PROD_NO = A.PROD_NO
											<if test="searchCondition != null">
												<where>
													<if test="searchCondition == 1 and searchKeyword !='' ">
										 				PROD_NO LIKE '%'||#{searchKeyword}||'%' 
													</if>
													<if test="searchCondition == 2 and searchKeyword !='' ">
										 				PROD_NAME LIKE '%'||#{searchKeyword}||'%' 
													</if>
													<if test="searchCondition == 3 and searchKeyword !='' ">
										 				PRICE = #{searchKeyword} 
													</if>
												</where>
											</if>
											<if test="orderCondition != null">
												<if test='orderCondition == "priceAsc"'>
													order by PRICE ASC
												</if>
												<if test='orderCondition == "priceDesc"'>
													order by PRICE DESC
												</if>
												<if test='orderCondition == "prodNoAsc"'>
													order by PRODUCT.PROD_NO
												</if>
											</if> 
											) inner_table
						WHERE ROWNUM &lt;= #{endRowNum} )
		WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum} 
	 </select>
	 	<!--  위 두번째 subQuery 의  
	 			WHERE ROWNUM &lt;= #{endRowNum} ) 는
	 			WHERE ROWNUM <= #{endRowNum} ) 의미이며..
	 			< 는 keyword 로 &lt; 를	사용.
	 			
	 			<![CDATA[  ~~~  ]]> 를 이용하여 아래와 같이 사용  할 수 있다.
	 			CDATA ==> Character Data 의 의미 Java 에서 \n 같은 특수문자 처리  

				WHERE ROWNUM <![CDATA[ <=]]> #{endRowNum} )
		-->
	
	<!-- SQL : SELECT ROW Count -->	 
	 <select  id="getTotalCount"  parameterType="search"	 resultType="int">
	  	SELECT COUNT(*)
	  	FROM(	SELECT PRODUCT.*  ,  (PRODUCT.QUANTITY-NVL(A.SUM,0)) SUM
				FROM PRODUCT LEFT OUTER JOIN (SELECT PROD_NO, SUM(purchaseQt) SUM FROM TRANSACTION GROUP BY prod_no) A ON PRODUCT.PROD_NO = A.PROD_NO
											<if test="searchCondition != null">
												<where>
													<if test="searchCondition == 1 and searchKeyword !='' ">
										 				PROD_NO LIKE '%'||#{searchKeyword}||'%' 
													</if>
													<if test="searchCondition == 2 and searchKeyword !='' ">
										 				PROD_NAME LIKE '%'||#{searchKeyword}||'%' 
													</if>
													<if test="searchCondition == 3 and searchKeyword !='' ">
										 				PRICE = #{searchKeyword} 
													</if>
												</where>
											</if>
											<if test="orderCondition != null">
												<if test='orderCondition == "priceAsc"'>
													order by PRICE ASC
												</if>
												<if test='orderCondition == "priceDesc"'>
													order by PRICE DESC
												</if>
												<if test='orderCondition == "prodNoAsc"'>
													order by PRODUCT.PROD_NO
												</if>
											</if>) countTable						
	 </select>
	 
</mapper>